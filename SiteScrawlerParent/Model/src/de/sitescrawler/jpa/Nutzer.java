package de.sitescrawler.jpa;
// Generated 02.05.2017 16:40:27 by Hibernate Tools 5.2.0.CR1

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.NamedAttributeNode;
import javax.persistence.NamedEntityGraph;
import javax.persistence.NamedSubgraph;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import de.sitescrawler.model.ZeitIntervall;

/**
 * Nutzer generated by hbm2java
 */
@Entity
@Table(uniqueConstraints = @UniqueConstraint(columnNames = "email"))
@NamedEntityGraph(name = "Nutzer.*", includeAllAttributes = true,
                  attributeNodes = { @NamedAttributeNode(value = "filterprofilgruppen", subgraph = "filterprofilgruppenGraph"),
                                     @NamedAttributeNode(value = "filterprofile", subgraph = "filterprofileGraph"),
                                     @NamedAttributeNode(value = "mitarbeiter", subgraph = "mitarbeiterFirmaGraph") },
                  subgraphs = { @NamedSubgraph(name = "filterprofilgruppenGraph",
                                               attributeNodes = { @NamedAttributeNode(value = "intervall"), @NamedAttributeNode(value = "uhrzeiten"),
                                                                  @NamedAttributeNode(value = "filterprofile", subgraph = "filterprofileGraph"),
                                                                  @NamedAttributeNode(value = "archiveintraege", subgraph = "archiveintraegeGraph"),
                                                                  @NamedAttributeNode(value = "empfaenger") }),
                                @NamedSubgraph(name = "filterprofileGraph",
                                               attributeNodes = { @NamedAttributeNode(value = "quellen"), @NamedAttributeNode(value = "kategorien") }),
                                @NamedSubgraph(name = "archiveintraegeGraph",
                                               attributeNodes = { @NamedAttributeNode(value = "artikel", subgraph = "artikelGraph") }),
                                @NamedSubgraph(name = "mitarbeiterFirmaGraph",
                                               attributeNodes = { @NamedAttributeNode(value = "firma", subgraph = "firmaGraph") }),
                                @NamedSubgraph(name = "firmaGraph",
                                               attributeNodes = { @NamedAttributeNode(value = "filterprofilgruppen", subgraph = "filterprofilgruppenGraph"),
                                                                  @NamedAttributeNode(value = "filterprofile", subgraph = "filterprofileGraph"),
                                                                  @NamedAttributeNode(value = "mitarbeiter", subgraph = "mitarbeiterNutzerGraph") }),
                                @NamedSubgraph(name = "mitarbeiterNutzerGraph", attributeNodes = { @NamedAttributeNode(value = "nutzer") }),
                                @NamedSubgraph(name = "artikelGraph", attributeNodes = { @NamedAttributeNode(value = "quelle") }) })
public class Nutzer extends Filtermanager implements java.io.Serializable
{

    private static final long       serialVersionUID    = 1L;
    private String                  vorname;
    private String                  nachname;
    private String                  email;
    private String                  passwort;
    private Boolean                 empfangehtmlmails;
    private Set<Rolle>              rollen              = new HashSet<>(0);
    private Set<Filterprofilgruppe> filterprofilgruppen = new HashSet<>(0);
    private Set<Mitarbeiter>        mitarbeiter         = new HashSet<>(0);

    public Nutzer()
    {
    }

    public Nutzer(String email, String vorname, String nachname)
    {
        this.email = email;
        this.vorname = vorname;
        this.nachname = nachname;
        this.empfangehtmlmails = false;
        Filterprofilgruppe filterGruppe = new Filterprofilgruppe(this, new Intervall(ZeitIntervall.TAEGLICH), "Meine Gruppe");
        filterGruppe.setNutzer(this);
        this.filterprofilgruppen.add(filterGruppe);
    }

    public Nutzer(String email, String passwort, String vorname, String nachname)
    {
        this.email = email;
        this.passwort = passwort;
        this.vorname = vorname;
        this.nachname = nachname;
        this.empfangehtmlmails = false;
        Filterprofilgruppe filterGruppe = new Filterprofilgruppe(this, new Intervall(ZeitIntervall.TAEGLICH), "Meine Gruppe");
        filterGruppe.setNutzer(this);
        this.filterprofilgruppen.add(filterGruppe);
    }

    public Nutzer(String vorname, String nachname, String email, String passwort, Boolean empfangehtmlmails, Set<Rolle> rollen,
                  Set<Filterprofilgruppe> filterprofilgruppen, Set<Mitarbeiter> mitarbeiter)
    {
        super();
        this.vorname = vorname;
        this.nachname = nachname;
        this.email = email;
        this.passwort = passwort;
        this.empfangehtmlmails = empfangehtmlmails;
        this.rollen = rollen;
        this.filterprofilgruppen = filterprofilgruppen;
        this.mitarbeiter = mitarbeiter;
    }

    // Unmapped
    @Transient
    public boolean isAdministrator()
    {
        for (Rolle r : this.getRollen())
        {
            if (r.getRolle().equals("Admin"))
            {
                return true;
            }
        }
        return false;
    }

    @Transient
    public String getGanzenNamen()
    {
        return this.vorname + " " + this.nachname;
    }

    @Transient
    public boolean isFirmengruppeVonNutzer(Filterprofilgruppe filtergruppe)
    {
        return this.filterprofilgruppen.contains(filtergruppe);
    }

    @Transient
    public Firma getFirmaZuFirmengruppe(Filterprofilgruppe gruppe)
    {
        for (Firma f : this.getFirmen())
        {
            if (f.getFilterprofilgruppen().contains(gruppe))
            {
                return f;
            }
        }
        return null;
    }

    @Transient
    public List<Firma> getFirmen()
    {
        return this.mitarbeiter.stream().map(Mitarbeiter::getFirma).collect(Collectors.toList());
    }

    // Mapped

    @Column(name = "vorname")
    public String getVorname()
    {
        return this.vorname;
    }

    public void setVorname(String vorname)
    {
        this.vorname = vorname;
    }

    @Column(name = "nachname")
    public String getNachname()
    {
        return this.nachname;
    }

    public void setNachname(String nachname)
    {
        this.nachname = nachname;
    }

    @Column(name = "email", unique = true, nullable = false)
    public String getEmail()
    {
        return this.email;
    }

    public void setEmail(String email)
    {
        this.email = email;
    }

    @Column(name = "passwort", nullable = false, length = 45)
    public String getPasswort()
    {
        return this.passwort;
    }

    public void setPasswort(String passwort)
    {
        this.passwort = passwort;
    }

    @ManyToMany(fetch = FetchType.LAZY, cascade = { CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH })
    @JoinTable(name = "Nutzer_hat_Rolle", joinColumns = { @JoinColumn(name = "Nutzer_Filtermanager_identifikation", nullable = false, updatable = false) },
               inverseJoinColumns = { @JoinColumn(name = "Rolle_rolle", nullable = false, updatable = false) })
    public Set<Rolle> getRollen()
    {
        return this.rollen;
    }

    public void setRollen(Set<Rolle> rollen)
    {
        this.rollen = rollen;
    }

    @Override
    @ManyToMany(fetch = FetchType.LAZY, cascade = { CascadeType.REFRESH })
    @JoinTable(name = "empfaenger", joinColumns = { @JoinColumn(name = "Nutzer_Filtermanager_identifikation", nullable = false, updatable = false) },
               inverseJoinColumns = { @JoinColumn(name = "Filtergruppe_FilterprofilgruppeId", nullable = false, updatable = false) })
    public Set<Filterprofilgruppe> getFilterprofilgruppen()
    {
        return this.filterprofilgruppen;
    }

    @Override
    public void setFilterprofilgruppen(Set<Filterprofilgruppe> filterprofilgruppen)
    {
        this.filterprofilgruppen = filterprofilgruppen;
    }

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "nutzer", cascade = { CascadeType.ALL })
    public Set<Mitarbeiter> getMitarbeiter()
    {
        return this.mitarbeiter;
    }

    public void setMitarbeiter(Set<Mitarbeiter> mitarbeiter)
    {
        this.mitarbeiter = mitarbeiter;
    }

    public Boolean getEmpfangehtmlmails()
    {
        return this.empfangehtmlmails;
    }

    public void setEmpfangehtmlmails(Boolean empfangehtmlmails)
    {
        this.empfangehtmlmails = empfangehtmlmails;
    }

    @Override
    public String toString()
    {
        return this.vorname + " " + this.nachname + " " + this.email;
    }

    @Override
    public boolean equals(Object obj)
    {
        if (this == obj)
        {
            return true;
        }
        if (obj == null)
        {
            return false;
        }
        if (this.getClass() != obj.getClass())
        {
            return false;
        }
        Nutzer other = (Nutzer) obj;
        if (this.email == null)
        {
            if (other.email != null)
            {
                return false;
            }
        }
        else
            if (!this.email.equals(other.email))
            {
                return false;
            }
        return true;
    }

}
